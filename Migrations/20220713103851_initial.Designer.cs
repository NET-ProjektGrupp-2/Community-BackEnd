// <auto-generated />
using System;
using Community_BackEnd.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Community_BackEnd.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220713103851_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AppUserForum", b =>
                {
                    b.Property<int>("ModeratedForumsId")
                        .HasColumnType("int");

                    b.Property<string>("ModeratorsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ModeratedForumsId", "ModeratorsId");

                    b.HasIndex("ModeratorsId");

                    b.ToTable("AppUserForum");

                    b.HasData(
                        new
                        {
                            ModeratedForumsId = 1,
                            ModeratorsId = "738e0132-1648-48cf-b252-d8eade1e71a5"
                        },
                        new
                        {
                            ModeratedForumsId = 1,
                            ModeratorsId = "d88c8165-6ec6-436d-aba6-16ad3a7a98f0"
                        },
                        new
                        {
                            ModeratedForumsId = 1,
                            ModeratorsId = "06da8d10-341a-4917-a1dd-b45bc1f91a36"
                        },
                        new
                        {
                            ModeratedForumsId = 1,
                            ModeratorsId = "1db9b1da-35ab-4838-8bbc-35a14fdb4c42"
                        });
                });

            modelBuilder.Entity("Community_BackEnd.Data.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HidePersonalInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "738e0132-1648-48cf-b252-d8eade1e71a5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cef5c956-e8aa-4bcf-b5f3-b8efb092d3cc",
                            CreationDate = new DateTime(2022, 7, 13, 12, 38, 50, 758, DateTimeKind.Local).AddTicks(9608),
                            DisplayName = "Jens",
                            Email = "jens.eresund@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Jens",
                            HidePersonalInfo = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4256dd9-b33b-48fd-8921-e7bd3ad83ede",
                            Surname = "Eresund",
                            TwoFactorEnabled = false,
                            UserName = "jeres89"
                        },
                        new
                        {
                            Id = "d88c8165-6ec6-436d-aba6-16ad3a7a98f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b551ae66-ec06-4e1f-ae31-d0638a7bc9b5",
                            CreationDate = new DateTime(2022, 7, 13, 12, 38, 50, 762, DateTimeKind.Local).AddTicks(2084),
                            DisplayName = "Abel",
                            Email = "kokiabel1986@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Abel",
                            HidePersonalInfo = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d9e5c878-d00a-4aac-8853-88d439b36651",
                            Surname = "Magicho",
                            TwoFactorEnabled = false,
                            UserName = "kembAB"
                        },
                        new
                        {
                            Id = "06da8d10-341a-4917-a1dd-b45bc1f91a36",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "00adb204-22fe-47b0-b598-cc74b64d29dd",
                            CreationDate = new DateTime(2022, 7, 13, 12, 38, 50, 762, DateTimeKind.Local).AddTicks(2143),
                            DisplayName = "Brian",
                            EmailConfirmed = false,
                            Firstname = "Brian",
                            HidePersonalInfo = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3177de6e-ed16-49b2-baa8-8d65935e2022",
                            Surname = "Veliz",
                            TwoFactorEnabled = false,
                            UserName = "Libre255"
                        },
                        new
                        {
                            Id = "1db9b1da-35ab-4838-8bbc-35a14fdb4c42",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2e646c40-694d-449c-9dc5-f7b748b0ed48",
                            CreationDate = new DateTime(2022, 7, 13, 12, 38, 50, 762, DateTimeKind.Local).AddTicks(2163),
                            DisplayName = "Benjamin",
                            Email = "godiset@gmail.com",
                            EmailConfirmed = false,
                            Firstname = "Benjamin",
                            HidePersonalInfo = true,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5677bed-1811-4860-883c-aab482feb8f0",
                            Surname = "Nordin",
                            TwoFactorEnabled = false,
                            UserName = "UnboundKey"
                        });
                });

            modelBuilder.Entity("Community_BackEnd.Data.Forums.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentForumId")
                        .HasColumnType("int");

                    b.Property<string>("RestrictedRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ParentForumId");

                    b.HasIndex("RestrictedRoleId");

                    b.ToTable("Forums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "The forum of all forums!",
                            Name = "Main"
                        });
                });

            modelBuilder.Entity("Community_BackEnd.Data.Forums.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContextPostId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContextPostId");

                    b.HasIndex("TopicId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "738e0132-1648-48cf-b252-d8eade1e71a5",
                            Content = "Hello World!",
                            PostDate = new DateTime(2022, 7, 13, 12, 34, 50, 762, DateTimeKind.Local).AddTicks(3651),
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "d88c8165-6ec6-436d-aba6-16ad3a7a98f0",
                            Content = "Well met World!",
                            ContextPostId = 1,
                            PostDate = new DateTime(2022, 7, 13, 12, 35, 50, 762, DateTimeKind.Local).AddTicks(5158),
                            TopicId = 1
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = "06da8d10-341a-4917-a1dd-b45bc1f91a36",
                            Content = "How is the World weather?",
                            ContextPostId = 2,
                            PostDate = new DateTime(2022, 7, 13, 12, 36, 50, 762, DateTimeKind.Local).AddTicks(5557),
                            TopicId = 1
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = "1db9b1da-35ab-4838-8bbc-35a14fdb4c42",
                            Content = "The sun is shining, World!",
                            ContextPostId = 3,
                            PostDate = new DateTime(2022, 7, 13, 12, 37, 50, 762, DateTimeKind.Local).AddTicks(5564),
                            TopicId = 1
                        });
                });

            modelBuilder.Entity("Community_BackEnd.Data.Forums.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ForumId");

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "738e0132-1648-48cf-b252-d8eade1e71a5",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ForumId = 1,
                            Title = "Hello World!"
                        });
                });

            modelBuilder.Entity("Community_BackEnd.Data.NewsArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("TopicId")
                        .IsUnique()
                        .HasFilter("[TopicId] IS NOT NULL");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = "738e0132-1648-48cf-b252-d8eade1e71a5",
                            Categories = "{ Categories: ['News','Site Development'] }",
                            Content = "There are now news in the news feed. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut felis ante, consequat ac urna nec, pretium consequat diam. Donec imperdiet bibendum est sed luctus. Sed pretium, eros imperdiet laoreet dapibus, neque ante molestie metus, nec sagittis metus est ut velit. Nullam ut egestas diam. Curabitur accumsan diam ac lorem commodo, vitae condimentum ipsum porta. Duis ullamcorper, enim non hendrerit egestas, nunc libero auctor turpis, consequat accumsan ligula lacus eget dolor. Etiam tortor arcu, laoreet in iaculis ac, facilisis non libero. Morbi egestas massa mi, ut dictum tellus sagittis in. Morbi nec mattis elit. Aenean sit amet nisi viverra, dignissim magna.",
                            PublishDate = new DateTime(2022, 7, 13, 12, 38, 50, 762, DateTimeKind.Local).AddTicks(9601),
                            Title = "There are News!",
                            TopicId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = "d88c8165-6ec6-436d-aba6-16ad3a7a98f0",
                            Categories = "{ Categories: ['News','Site Development'] }",
                            Content = "Ipsum dolor sit amet, consectetur adipiscing elit. Ut felis ante, consequat ac urna nec, pretium consequat diam. Donec imperdiet bibendum est sed luctus. Sed pretium, eros imperdiet laoreet dapibus, neque ante molestie metus, nec sagittis metus est ut velit. Nullam ut egestas diam. Curabitur accumsan diam ac lorem commodo, vitae condimentum ipsum porta. Duis ullamcorper, enim non hendrerit egestas, nunc libero auctor turpis, consequat accumsan ligula lacus eget dolor. Etiam tortor arcu, laoreet in iaculis ac, facilisis non libero. Morbi egestas massa mi, ut dictum tellus sagittis in. Morbi nec mattis elit. Aenean sit amet nisi viverra, dignissim magna.",
                            PublishDate = new DateTime(2022, 7, 13, 12, 38, 50, 763, DateTimeKind.Local).AddTicks(1325),
                            Title = "Lorem Ipsum",
                            TopicId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c788606-1f92-43e1-a297-cfca3da640c1",
                            ConcurrencyStamp = "269fd70f-bf2f-466d-9dc3-64f6bb288c20",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = "0b6d8dcf-6f66-439f-a49c-260fcc7da5d0",
                            ConcurrencyStamp = "7854d353-6f83-4901-8e3e-5b773dba6ab4",
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = "e017ee79-023b-43c7-94ef-03f0f0deb7e1",
                            ConcurrencyStamp = "ed2fdadc-0f61-4c59-8431-a08f19827166",
                            Name = "Writer"
                        },
                        new
                        {
                            Id = "e7036370-7cc5-42f4-9891-7511f4377e98",
                            ConcurrencyStamp = "94c40293-adff-47b0-84c6-c70ff6ce1b58",
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "738e0132-1648-48cf-b252-d8eade1e71a5",
                            RoleId = "2c788606-1f92-43e1-a297-cfca3da640c1"
                        },
                        new
                        {
                            UserId = "d88c8165-6ec6-436d-aba6-16ad3a7a98f0",
                            RoleId = "2c788606-1f92-43e1-a297-cfca3da640c1"
                        },
                        new
                        {
                            UserId = "06da8d10-341a-4917-a1dd-b45bc1f91a36",
                            RoleId = "2c788606-1f92-43e1-a297-cfca3da640c1"
                        },
                        new
                        {
                            UserId = "1db9b1da-35ab-4838-8bbc-35a14fdb4c42",
                            RoleId = "2c788606-1f92-43e1-a297-cfca3da640c1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AppUserForum", b =>
                {
                    b.HasOne("Community_BackEnd.Data.Forums.Forum", null)
                        .WithMany()
                        .HasForeignKey("ModeratedForumsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Community_BackEnd.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("ModeratorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Community_BackEnd.Data.Forums.Forum", b =>
                {
                    b.HasOne("Community_BackEnd.Data.Forums.Forum", "ParentForum")
                        .WithMany("SubForums")
                        .HasForeignKey("ParentForumId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "RestrictedRole")
                        .WithMany()
                        .HasForeignKey("RestrictedRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentForum");

                    b.Navigation("RestrictedRole");
                });

            modelBuilder.Entity("Community_BackEnd.Data.Forums.Post", b =>
                {
                    b.HasOne("Community_BackEnd.Data.AppUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Community_BackEnd.Data.Forums.Post", "ContextPost")
                        .WithMany("Replies")
                        .HasForeignKey("ContextPostId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Community_BackEnd.Data.Forums.Topic", "Topic")
                        .WithMany("Posts")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("ContextPost");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Community_BackEnd.Data.Forums.Topic", b =>
                {
                    b.HasOne("Community_BackEnd.Data.AppUser", "Author")
                        .WithMany("Topics")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Community_BackEnd.Data.Forums.Forum", "Forum")
                        .WithMany("Topics")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("Community_BackEnd.Data.NewsArticle", b =>
                {
                    b.HasOne("Community_BackEnd.Data.AppUser", "Author")
                        .WithMany("Articles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Community_BackEnd.Data.Forums.Topic", "Topic")
                        .WithOne("Article")
                        .HasForeignKey("Community_BackEnd.Data.NewsArticle", "TopicId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Community_BackEnd.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Community_BackEnd.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Community_BackEnd.Data.AppUser", null)
                        .WithMany("IdentityUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Community_BackEnd.Data.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Community_BackEnd.Data.AppUser", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("IdentityUserRoles");

                    b.Navigation("Posts");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Community_BackEnd.Data.Forums.Forum", b =>
                {
                    b.Navigation("SubForums");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("Community_BackEnd.Data.Forums.Post", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Community_BackEnd.Data.Forums.Topic", b =>
                {
                    b.Navigation("Article");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
